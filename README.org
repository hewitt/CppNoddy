* Build as a Docker container (real arithmetic) with PETSc/SLEPc

This will generate a docker container from this Github repo with a CppNoddy library to wrap around PETSc/SLEPc linked to MKL.The build will take some time and the container will be quite large because of PETSc+SLEPc+MKL (approx. 3GB).
#+BEGIN_SRC shell
  docker build --rm --build-arg HOST_UID=$(id -u) -f Dockerfile_RealPetscSlepc -t real https://github.com/hewitt/CppNoddy.git#:docker
#+END_SRC

** Run the Docker container and self-test codes

This mounts the current directory $PWD as /CODE in the container. Any output from the code in the container can be directed to /DATA which in this case points to a user directory ~/data.

#+BEGIN_SRC shell
  docker container run -ti --log-driver none --rm -u $(id -u):$(id -g) -v $PWD:/CODE -v ~/data:/DATA -w /CODE real:latest
  
  cd /home/noddy/build
  ninja test
#+END_SRC

* Build a Docker container with only Lapack/Blas support.
This should be slightly quicker, but because it pulls in the Intel MKL it will still be the best part of 3GB as a container.

#+BEGIN_SRC shell
  docker build --rm --build-arg HOST_UID=$(id -u) -f Dockerfile_Lapack -t lapack https://github.com/hewitt/CppNoddy.git#:docker
#+END_SRC

** Run the Docker container and self-test codes

This mounts the current directory $PWD as /CODE in the container. Any output from the code in the container can be directed to /DATA which in this case points to a user directory ~/data.

#+BEGIN_SRC shell
  docker container run -ti --log-driver none --rm -u $(id -u):$(id -g) -v $PWD:/CODE -v ~/data:/DATA -w /CODE lapack:latest
  
  cd /home/noddy/build
  ninja test
#+END_SRC



* Build locally for real arithmetic with PETSc/SLEPc

You will need accessible lapack64/blas64 libs. If slepc=petsc=true you will
also need a separately installed PETSc/SLEPc instance.

#+BEGIN_SRC shell
meson build_real --prefix=/home/username/local
meson configure -Dslepc=true -Dpetscd=true build_real

cd build_real
ninja reconfigure
ninja
ninja test
ninja install
#+END_SRC



